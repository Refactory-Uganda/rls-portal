name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - staging
      - development
  pull_request:
    branches:
      - staging
      - development

env:
  NODE_VERSION: '20.x'
  CACHE_KEY_PREFIX: v1

jobs:
  run-linters:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test-and-build:
    needs: [run-linters]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 1

  check-conflicts:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: |
          git fetch --all

      - name: Check for merge conflicts
        run: |
          git branch -r | grep -v '\->' | while read remote; do
            branch="${remote#origin/}"
            git branch --track "${branch}" "$remote" 2>/dev/null || true
          done

          if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) origin/${{ github.base_ref }} HEAD | grep -i '<<<<<<<'; then
            echo "::error::Merge conflicts detected. Please resolve conflicts before merging."
            exit 1
          else
            echo "No merge conflicts detected."
          fi

  deploy-staging:
    if: |
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && (github.base_ref == 'staging' || github.base_ref == 'development'))
    needs: [test-and-build]
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist

      - name: Deploy to Render
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Deploying PR #${{ github.event.pull_request.number }} to staging"
          else
            echo "Deploying branch ${{ github.ref_name }} to staging"
          fi
          curl -X POST ${{ secrets.RENDER_DEPLOYMENT_HUK }}

          